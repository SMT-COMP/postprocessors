#!/bin/bash

# Jochen Hoenicke

# A simple post-processor for proof checker results.
# The logic is:
# - take the first line
# - all other lines after it ignored
# - if the line is valid or holey, then the status is unsat.
# - if the line is sat, then the status is sat.
# - otherwise, the status is unknown.
# - key-value pairs after the result are added to the result table.
# - all non key-value pairs after the result are ignored.

# We also get the cpu/wall time of the different steps as follows:
#    x/x ; compressing proof               <-- solver time
#    x/x ; checking proof                  <-- start checking time
#    x/x ; valid/invalid/holey/sat/unknown <-- end checking time

SOLVER_TIME_PAIR=$(grep '; compressing proof'  "$1" | cut -f1)
CHECKSTART_TIME_PAIR=$(grep '; checking proof'  "$1" | cut -f1)
CHECKEND_TIME_PAIR=$(grep '\(valid\|invalid\|holey\|sat\|unknown\)'  "$1" | cut -f1)

STATUS=$(
# remove the StarExec timing information from each line of the solver output
    sed 's/^[0-9]*\.[0-9]*\/[0-9]*.[0-9]*\t//g' "$1" | \
# remove empty lines and lines containing a comment
    egrep -v -e '^\s*(;.*)?\s*$' | \
# the first answer wins, strip space around it.
    head -1 | sed -E 's/^[[:space:]]*([[:alnum:]]+)[[:space:]]*$/\1/')

if [[ "$STATUS" == "valid" ]]; then
    # the output contains only the word "valid"
    echo "starexec-result=unsat"
    echo "reason=valid"
elif [[ "$STATUS" == "holey" ]]; then
    # the output contains only the word "holey" - a valid proof with holes.
    echo "starexec-result=unsat"
    echo "reason=holey"
elif [[ "$STATUS" == "sat" ]]; then
    # the output contains only the word "sat"
    echo "starexec-result=sat"
else
    echo "starexec-result=starexec-unknown"
    if [[ "$STATUS" == "EOF" ]]; then
	echo "reason=timeout"
    elif [[ "$STATUS" == "invalid" ]]; then
	echo "reason=invalid"
    elif [[ "$STATUS" != "unknown" ]]; then
	echo "reason=error"
    else
	echo "reason=unknown"
    fi
fi

# compute times from time stamps
if [ -n "$SOLVER_TIME_PAIR" ]; then
    CPU=$(echo $SOLVER_TIME_PAIR | cut -d/ -f1)
    WALL=$(echo $SOLVER_TIME_PAIR | cut -d/ -f2)
    echo "solver_cpu_time=$CPU"
    echo "solver_wall_time=$WALL"
fi
if [ -n "$CHECKSTART_TIME_PAIR" -a -n "$CHECKEND_TIME_PAIR" ]; then
    CPU1=$(echo $CHECKSTART_TIME_PAIR | cut -d/ -f1)
    WALL1=$(echo $CHECKSTART_TIME_PAIR | cut -d/ -f2)
    CPU2=$(echo $CHECKEND_TIME_PAIR | cut -d/ -f1)
    WALL2=$(echo $CHECKEND_TIME_PAIR | cut -d/ -f2)
    CPU=$(perl -e 'printf "%.2f",'"$CPU2"' - '"$CPU1")
    WALL=$(perl -e 'printf "%.2f", '"$WALL2"' - '"$WALL1")
    echo "checker_cpu_time=$CPU"
    echo "checker_wall_time=$WALL"
fi

# retain any key/value pairs given by validator
sed 's/^[0-9]*\.[0-9]*\/[0-9]*.[0-9]*\t//g' "$1" | \
    grep -E '^[-A-Za-z0-9_]+=[-A-Za-z0-9_\.]*$'

exit 0
