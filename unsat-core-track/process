#!/bin/bash

# Matthias Heizmann (heizmann@informatik.uni-freiburg.de)
# SMT-COMP 2018 post-processor for the Unsat-core Track

# This postprocessor contains a copy several SMT solvers that are located in
# the validation_solvers subfolder

# This bash script mainly does the following
# 1. Examine if the check-sat result of the solver was "sat".
#    (would be considered as an error)
# 2. Determine the difference between the number of assert commands in the
#     input and the number of names in the unsat-core which was returned by
#     the solver. We call this difference the *reduction*.
# 3. Write the "unsat-core-validation-script.smt2" SMT script. This script
#     is a copy of the input which contains only the assert commands whose
#     corresponding named terms were in the unsat-core returned by the solver.
# 4. Use other solvers to validate the unsat core. We use the validation
#     solvers to check the unsat-core-validation-script.smt2. We consider
#     the unsat-core valid if the number of validation solvers that return
#     'sat' is smaller then or equal to the number of validation solvers that
#     return 'unsat'.

# The validation solvers that were added to this post-processor are the
# main track submissions or fixed versions of solvers submitted to
# SMT-COMP 2021 or entered by the organizers.


# $1: solver output
# $2: path to pre-processed benchmark

if [[ $# -lt 2 ]]; then
    echo "Usage: $0 <solver-output> <path-to-processed-benchmark>"
    exit 1
fi



# timeout in seconds for each validating solver
VALIDATION_TIMOUT=120

set -u
# do not use 'set -e' since the scrambler my fail while trying to parse the unsat core

echo "ucpp-version=2021v0"

# set validating solvers for each logic
ABV="cvc5 z3 ultimateeliminator+mathsat"
ABVFP="cvc5 ultimateeliminator+mathsat"
ABVFPLRA="cvc5 ultimateeliminator+mathsat"
ALIA="cvc5 z3 smtinterpol"
AUFBV="cvc5 z3 ultimateeliminator+mathsat"
AUFBVDTLIA="cvc5"
AUFBVDTNIA="cvc5"
AUFBVFP="cvc5 ultimateeliminator+mathsat"
AUFDTLIA="cvc5 vampire"
AUFDTLIRA="cvc5 vampire"
AUFDTNIRA="cvc5 vampire"
AUFFPDTLIRA="cvc5"
AUFFPDTNIRA="cvc5"
AUFLIA="cvc5 vampire z3"
AUFLIRA="cvc5 vampire z3"
AUFNIA="cvc5 vampire z3"
AUFNIRA="cvc5 vampire z3"
BV="cvc5 z3 yices2qs"
BVFP="cvc5 ultimateeliminator+mathsat"
BVFPLRA="cvc5 ultimateeliminator+mathsat"
FP="cvc5 z3 ultimateeliminator+mathsat"
FPLRA="cvc5 ultimateeliminator+mathsat"
LIA="cvc5 ultimateeliminator+mathsat vampire"
LRA="cvc5 vampire z3"
NIA="cvc5 z3 vampire"
NRA="cvc5 z3 yices2qs"
QF_ABV="bitwuzla yices2 mathsat"
QF_ABVFP="bitwuzla cvc5 mathsat"
QF_ABVFPLRA="cvc5 mathsat colibri"
QF_ALIA="mathsat z3 yices2"
QF_ANIA="cvc5 mathsat z3"
QF_AUFBV="yices2 mathsat bitwuzla"
QF_AUFBVFP="mathsat bitwuzla"
QF_AUFLIA="cvc5 z3 yices2"
QF_AUFNIA="cvc5 mathsat z3"
QF_AX="cvc5 z3 yices2"
QF_BV="yices2 bitwuzla cvc5"
QF_BVFP="bitwuzla cvc5 mathsat"
QF_BVFPLRA="bitwuzla cvc5 mathsat"
QF_DT="cvc5 z3 smtinterpol"
QF_FP="bitwuzla cvc5 mathsat"
QF_FPLRA="bitwuzla colibri mathsat"
QF_IDL="yicesls z3 cvc5"
QF_LIA="cvc5 mathsat yices2"
QF_LIRA="cvc5 z3 yices2"
QF_LRA="cvc5 yices2 opensmt"
QF_NIA="cvc5 mathsat z3"
QF_NIRA="cvc5 smtrat z3"
QF_NRA="cvc5 yices2 z3"
QF_RDL="cvc5 z3 yices2"
QF_S="cvc5 z3str4 z3"
QF_SLIA="cvc5 z3str4 z3"
QF_SNIA="cvc5"
QF_UF="cvc5 z3 yices2"
QF_UFBV="bitwuzla yices2 cvc5"
QF_UFDT="cvc5 z3 smtinterpol"
QF_UFDTLIRA="cvc5 smtinterpol"
QF_UFFP="cvc5 bitwuzla colibri"
QF_UFFPDTLIRA="cvc5"
QF_UFIDL="cvc5 z3 yices2"
QF_UFLIA="cvc5 z3 yices2"
QF_UFLRA="cvc5 z3 yices2"
QF_UFNIA="cvc5 z3 mathsat"
QF_UFNRA="cvc5 z3 mathsat"
UF="cvc5 vampire iprover"
UFBV="cvc5 z3 ultimateeliminator+mathsat"
UFBVFP="cvc5 ultimateeliminator+mathsat"
UFBVLIA="cvc5 ultimateeliminator+mathsat"
UFDT="cvc5 vampire iprover"
UFDTLIA="cvc5 vampire iprover"
UFDTLIRA="cvc5 vampire iprover"
UFDTNIA="cvc5 vampire"
UFDTNIRA="cvc5 vampire"
UFFPDTLIRA="cvc5"
UFFPDTNIRA="cvc5"
UFIDL="cvc5 vampire z3"
UFLIA="cvc5 vampire z3"
UFLRA="cvc5 vampire z3"
UFNIA="cvc5 vampire z3"

# count number of assert commands
NUMBER_OF_ASSERT_COMMANDS=$(grep -c assert "$2")

# remove success response lines from solver output
grep -v success "$1" > ./cleanSolverOutput.txt
# remove the StarExec timing information from each line of the solver output
sed -i 's/^[0-9]*\.[0-9]*\/[0-9]*.[0-9]*\t//g' ./cleanSolverOutput.txt

# get solver's check-sat response (the xargs removes leading and trailing whitespaces)
CHECK_SAT_RESPONSE=$(head -n 1 ./cleanSolverOutput.txt|xargs)

RESULT_IS_ERRONEOUS="0"

# the check-sat response is erroneous iff it is "sat"
if [ "$CHECK_SAT_RESPONSE" == "sat" ]; then
	echo "check-sat-result-is-erroneous=1"
	echo "starexec-result=$CHECK_SAT_RESPONSE"
	RESULT_IS_ERRONEOUS="1"
elif [ "$CHECK_SAT_RESPONSE" == "unsat" ]; then
	echo "check-sat-result-is-erroneous=0"
	echo "starexec-result=$CHECK_SAT_RESPONSE"
else
	echo "check-sat-result-is-erroneous=0"
	echo "starexec-result=starexec-unknown"
fi

echo "number-of-assert-commands=$NUMBER_OF_ASSERT_COMMANDS"

if [ "$CHECK_SAT_RESPONSE" == "unsat" ]; then
	# check if there is an unsupported or error result after the unsat.
	if sed -e '2{p;q;}' < ./cleanSolverOutput.txt | \
			grep -E '^[[:space:]]*(unsupported|\([[:space:]]*error[[:space:]]*"([^"]|"")*"[[:space:]]*\)[[:space:]]*)$' > /dev/null; then
		# if there is an error message or unsupported
		# this is not considered as an erroneous result but the reduction is set to 0
		echo "parsable-unsat-core=false"
		REDUCTION="0"
	else
		# remove all assert commands that are not in unsat core and remove named terms, do not scramble again (seed 0)
		./scrambler -seed 0 -term_annot false -core ./cleanSolverOutput.txt < "$2" > ./unsat-core-validation-script.smt2 2>&1

		if [[ $(head -n 1 ./unsat-core-validation-script.smt2|grep "ERROR") ]]; then
			# if we cannot parse the solvers output (e.g., not output because of timeout)
			# this is not considered as an erroneous result but the reduction is set to 0
			echo "parsable-unsat-core=false"
			REDUCTION="0"
		else
			# extract the line with the set-logic command from the input SMT script
			SET_LOGIC_COMMAND=$(sed -n '/^(set-logic/{p;q;}' "$2")
			# extract the string that states the logic
			LOGIC=$(echo "$SET_LOGIC_COMMAND" |sed -e "s/^(set-logic\\ //" -e "s/)$//")
			# use the lists from this beginning of this bash script to determine the validating solvers
			declare VALIDATION_SOLVERS
			VALIDATION_SOLVERS=(${!LOGIC})
			echo "parsable-unsat-core=true"
			# size of unsat core was written as comment in the first line by the benchmark scrambler
			SIZE_OF_UNSAT_CORE=$(head -n 1 ./unsat-core-validation-script.smt2 |sed -e 's/;; parsed \([0-9][0-9]*\) names:.*/\1/')
			echo "size-unsat-core=$SIZE_OF_UNSAT_CORE"
			REDUCTION=$((NUMBER_OF_ASSERT_COMMANDS - SIZE_OF_UNSAT_CORE))

			echo "validation-solvers=${#VALIDATION_SOLVERS[@]}"
			UNSAT_CORE_CONFIRMATIONS="0"
			UNSAT_CORE_REJECTIONS="0"
			for (( i=0; i<${#VALIDATION_SOLVERS[@]}; i++ ));
			do
				TIME_START=$(date +%s)
				VALIDATION_SOLVER=${VALIDATION_SOLVERS[i]}
				VALIDATION_SOLVER_PATH="validation_solvers/$VALIDATION_SOLVER/bin"
				mkdir output
				pushd $VALIDATION_SOLVER_PATH > /dev/null
				timeout -k 10 $VALIDATION_TIMOUT ./starexec_run_default ./../../../unsat-core-validation-script.smt2 ./../../../output > ./../../../validationOutput.txt 2>/dev/null
				popd > /dev/null
				rm -rf output
				TIME_END=$(date +%s)
				RUNTIME=$((TIME_END-TIME_START))
				VALIDATION_CHECK_SAT_RESPONSE=$(head -n 1 ./validationOutput.txt|xargs)
				if [ "$VALIDATION_CHECK_SAT_RESPONSE" == "sat" ] || [ "$VALIDATION_CHECK_SAT_RESPONSE" == "unsat" ]; then
					VALIDATION_CHECK_SAT_RESULT=$VALIDATION_CHECK_SAT_RESPONSE
				else
					VALIDATION_CHECK_SAT_RESULT="unknown"
				fi
				echo "validation-check-sat-result_${VALIDATION_SOLVERS[$i]}=$VALIDATION_CHECK_SAT_RESULT"
				echo "validation-check-sat-time_${VALIDATION_SOLVERS[$i]}=$RUNTIME"
				if [ "$VALIDATION_CHECK_SAT_RESULT" == "sat" ]; then
					UNSAT_CORE_REJECTIONS=$((UNSAT_CORE_REJECTIONS + 1))
				fi
				if [ "$VALIDATION_CHECK_SAT_RESULT" == "unsat" ]; then
					UNSAT_CORE_CONFIRMATIONS=$((UNSAT_CORE_CONFIRMATIONS + 1))
				fi
			done
			echo "unsat-core-rejections=$UNSAT_CORE_REJECTIONS"
			echo "unsat-core-confirmations=$UNSAT_CORE_CONFIRMATIONS"
			if [ "$UNSAT_CORE_REJECTIONS" -gt "$UNSAT_CORE_CONFIRMATIONS" ];
			then
				UNSAT_CORE_VALIDATED="false"
				RESULT_IS_ERRONEOUS="1"
				REDUCTION="0"
			else
				UNSAT_CORE_VALIDATED="true"
			fi
			echo "unsat-core-validated=$UNSAT_CORE_VALIDATED"
		fi
	fi
else
	REDUCTION="0"
fi

echo "result-is-erroneous=$RESULT_IS_ERRONEOUS"
echo "reduction=$REDUCTION"
